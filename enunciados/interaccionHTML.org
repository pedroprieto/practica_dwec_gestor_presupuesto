* Interacción de JavaScript con HTML
  El objetivo de esta práctica es conocer la API que los navegadores proporcionan a JavaScript para poder trabajar con documentos HTML. Por primera vez, utilizaremos el navegador para mostrar los datos de la aplicación.

** Repositorio de la práctica
   El *repositorio base* de la práctica está disponible en: https://github.com/pedroprieto/practica_dwec_gestor_presupuesto

   Se supone que ya está configurado el *repositorio personal* y el *remoto secundario* (~profesor~). Si no es así, revisa las instrucciones de las prácticas anteriores. En el apartado de *Preparación* se indica cómo proceder.
   
** Requisitos de software
Para poder realizar esta práctica y que funcione adecuadamente el entorno de test será necesario *instalar el siguiente software* en el equipo:
- Navegador [[https://www.google.com/intl/es/chrome/][Chrome]].
- Entorno de ejecución [[https://nodejs.org/es/][NodeJS]].

** Desarrollo guiado por test
Para realizar la práctica se seguirán los principios del [[https://es.wikipedia.org/wiki/Desarrollo_guiado_por_pruebas][Desarrollo Guiado por Test]]. Para ello se proporciona en el repositorio una serie de ficheros que permiten *ejecutar tests*. Dichos tests comprobarán que el programa cumple con algunos de los requisitos de la práctica.

El repositorio se ha configurado para que se *ejecuten los tests automáticamente en la nube de GitHub cuando se realice un push o una pull request*. Para ello se hará uso del servicio [[https://github.com/features/actions][GitHub Actions]].

** Preparación
1. Instalar los requisitos de software indicados
2. Abrir un terminal
3. Situarse en la carpeta del repositorio personal de la práctica
4. *Incorporar a tu repositorio personal los cambios* realizados por el profesor correspondientes a los archivos de esta práctica. Para ello hay que ejecutar:
   #+begin_src shell
     git pull profesor master
   #+end_src
5. Este comando *descarga* los cambios que ha realizado el *profesor* en el *repositorio base* y los *integra* en tu repositorio personal. Tras realizar este paso, seguramente git *abra el editor configurado por defecto* para que introduzcas un *mensaje para crear un nuevo commit* que integre tus cambios y los cambios del profesor. Debes introducir el texto y guardar los cambios.
6. En principio no deben producirse *conflictos*. En caso de que se produzcan (por ejemplo, porque has editado el fichero ~.gitignore~ y yo también porque lo exigía la práctica), *resuélvelos y notifícamelo a través de un Issue*.
7. Ejecuta el comando ~git push~ para subir los cambios a tu repositorio personal (el remoto principal) en GitHub y que queden guardados ahí también.
8. Ejecutar el comando ~npm install~. Este comando instalará todas las librerías de Node necesarias para ejecutar los tests. Dichas librerías se guardarán en una carpeta con nombre ~node_modules~ dentro del repositorio. Nótese que dicha carpeta está excluida del repositorio en el archivo ~.gitignore~.
9. Ejecutar el comando ~npm run test4~ para lanzar los *tests de esta práctica*. Este comando podrá ejecutarse tantas veces como sea necesario. Por pantalla se mostrarán los tests que se pasan y los que no, de manera que se tendrá información sobre las acciones que hay que realizar. Los tests también se ejecutarán automáticamente en GitHub Actions al subir los cambios al repositorio y al realizar la pull request.
10. Opcionalmente (recomendable), ejecutar el comando ~npm test~ para lanzar *todos los tests presentes en el repositorio*. Se deberá comprobar que se pasan los tests de las prácticas anteriores a la que se esté realizando. Lógicamente, si el repositorio incluye los tests de prácticas *posteriores* a la que se esté realizando, dichos tests no se pasarán (ya que el trabajo está todavía por hacer). Este último caso puede darse si la persona no está realizando la práctica propuesta en la semana actual (va con "retraso", por así decirlo). En *GitHub Actions* se ejecutarán todos los tests en tareas independientes: así se podrá comprobar si el test de la práctica que se está realizando se ha pasado.

    #+begin_quote
    ¡IMPORTANTE! Esta práctica utiliza una suite de test diferente, [[https://www.cypress.io/][Cypress]]. Puedes ejecutar el test en consola de la manera habitual (~npm run test4~) o bien ejecutar el modo *gráfico* mediante el comando ~npx cypress open~. Recuerda ejecutar ~npm install~ antes para instalar el paquete ~cypress~.

    Además, como es la primera práctica en la que se utiliza el navegador se puede *visualizar el trabajo* que vamos haciendo. Sin embargo, como la carga de scripts la realizamos a través de *módulos*, no basta con hacer doble clic en el archivo ~HTML~, sino que es necesario visualizar la página *desde un servidor*. Para ello puedes utilizar la extensión [[https://ritwickdey.github.io/vscode-live-server/][Live Server]] de Vísual Studio Code.
    #+end_quote

** Tareas a realizar
*** Lectura
    Lee atentamente los siguientes artículos y sus correspondientes subsecciones en caso de que las tengan:
    - https://es.javascript.info/document
      
*** Ficheros de la aplicación
    Vamos a añadir varios ficheros nuevos a la aplicación:
    - ~js/gestionPresupuestoWeb.js~ - Este fichero contendrá las *utilidades* necesarias para *mostrar* los datos de la aplicación en la página ~interaccionHTML.html~
    - ~js/generarDatosEstaticos.js~ - Fichero que contendrá un *programa de ejemplo* para generar un conjunto de gastos y mostrar la información relacionada con estos en la página ~interaccionHTML.html~
    - ~interaccionHTML.html~ - Fichero que contendrá el *código HTML* que mostrará los datos de la aplicación (en este caso, el resultado del programa de ejemplo).
    
    La aplicación funcionará de la siguiente manera:
    - El usuario abrirá el archivo ~interaccionHTML.html~ en el navegador
    - El archivo ~interaccionHTML.html~ cargará el programa ~js/generarDatosEstaticos.js~. Dicho programa *hará uso de dos programas* (que se utilizarán como librerías):
      - Librería ~js/gestionPresupuestoWeb.js~, que definirá una serie de *funciones* para interactuar con el [[https://es.javascript.info/dom-nodes][DOM]] de la página y mostrar los datos en HTML.
      - Librería ~js/gestionPresupuesto.js~, que contiene la lógica de negocio de la aplicación (funciones para crear, editar, borrar y mostrar gastos).

    Es necesario dejar claro que de momento la aplicación solo *ejecuta un código y termina*. Es decir, *no es interactiva*: todavía no nos va a permitir interactuar para crear, modificar o borrar gastos. Simplemente *creará un conjunto de gastos y mostrará en una página web la información asociada a ellos*.
    
*** Fichero ~js/gestionPresupuestoWeb.js~ 
    El código de este fichero hará uso de la teoría explicada en la sección [[https://es.javascript.info/document][Documento del tutorial de JavaScript]]. El fichero deberá [[https://es.javascript.info/import-export#export-separado-de-la-declaracion][exportar]] las siguientes *funciones*:
    - ~mostrarDatoEnId~
    - ~mostrarGastoWeb~
    - ~mostrarGastosAgrupadosWeb~
    
**** Función ~mostrarDatoEnId~
     Función de *dos parámetros* que se encargará de escribir el ~valor~ (texto) en el elemento HTML con ~id~ ~idElemento~ indicado:
     - ~idElemento~ - Hará referencia al ~id~ del elemento HTML donde se insertará el resultado en formato texto.
     - ~valor~ - El valor a mostrar.
      
**** Función ~mostrarGastoWeb~
     Función de *dos parámetros* que se encargará de *añadir dentro del elemento HTML* con ~id~ ~idElemento~ indicado una *estructura HTML* para el ~gasto~ que se pase como parámetro:
     - ~idElemento~ - Hará referencia al ~id~ del elemento HTML donde se insertará el conjunto de estructuras HTML que se crearán para cada gasto.
     - ~gasto~ - Objeto gasto
     
     Así, para un determinado ~gasto~ se creará una *estructura* como la siguiente:
     #+begin_src html
       <div class="gasto">
         <div class="gasto-descripcion">DESCRIPCIÓN DEL GASTO</div>
         <div class="gasto-fecha">FECHA DEL GASTO</div> 
         <div class="gasto-valor">VALOR DEL GASTO</div> 
         <div class="gasto-etiquetas">
           <span class="gasto-etiquetas-etiqueta">
             ETIQUETA 1
           </span>
           <span class="gasto-etiquetas-etiqueta">
             ETIQUETA 2
           </span>
           <!-- Etcétera -->
         </div> 
       </div>
     #+end_src

     Donde se sustituirán los textos por los datos del gasto correspondiente.
     
**** Función ~mostrarGastosAgrupadosWeb~
     Función de *tres parámetros* que se encargará de crear dentro del elemento HTML con ~id~ ~idElemento~ indicado una *estructura HTML* para el objeto ~agrup~ que se pase como parámetro:
     - ~idElemento~ - Hará referencia al ~id~ del elemento HTML donde se insertará el conjunto de estructuras HTML que se creará para cada gasto.
     - ~agrup~ - Objeto que contendrá el resultado de *agrupar el total de gastos por período temporal* (ejecución de la función ~agruparGastos~ desarrollada en la práctica anterior). Recordemos un ejemplo del formato que puede tener ~agrup~ en el caso de agrupar por mes:
       #+begin_src js
         agrup = {
             "2021-09": 5,
             "2021-10": 39
         }
       #+end_src
     - ~periodo~ - Período temporal por el que se habrá realizado la agrupación. Recordemos que puede ser ~mes~, ~dia~ o ~anyo~.
         
     Para cada objeto ~agrup~ se creará una *estructura* como la siguiente:
     #+begin_src html
       <div class="agrupacion">
         <!-- PERIODO será "mes", "día" o "año" en función de si el parámetro
              de la función es "mes", "dia" o "anyo" respectivamente -->
         <h1>Gastos agrupados por PERIODO</h1>
       
         <!-- Se deberá crear un div.agrupacion-dato para cada propiedad del objeto agrup:
              https://es.javascript.info/keys-values-entries#object-keys-values-entries -->
         <div class="agrupacion-dato">
           <span class="agrupacion-dato-clave">NOMBRE_PROPIEDAD_OBJETO_AGRUP</span>
           <span class="agrupacion-dato-valor">VALOR_PROPIEDAD_OBJETO_AGRUP</span>
         </div>
       
         <div class="agrupacion-dato">
           <span class="agrupacion-dato-clave">NOMBRE_PROPIEDAD_OBJETO_AGRUP</span>
           <span class="agrupacion-dato-valor">VALOR_PROPIEDAD_OBJETO_AGRUP</span>
         </div>
       
         <!-- Etcétera -->
       
       </div>
     #+end_src

     Así, para el ejemplo de ~agrup~ dado antes se deberá generar un código como el siguiente:
     #+begin_src html
       <div class="agrupacion">
         <h1>Gastos agrupados por mes</h1>
         <div class="agrupacion-dato">
           <span class="agrupacion-dato-clave">2021-09</span>
           <span class="agrupacion-dato-valor">5</span>
         </div>
       
         <div class="agrupacion-dato">
           <span class="agrupacion-dato-clave">2021-10</span>
           <span class="agrupacion-dato-valor">39</span>
         </div>
       </div>
     #+end_src

*** Fichero ~js/generarDatosEstaticos.js~ 
    El programa que se cree en este fichero deberá realizar las siguientes tareas mostrando el resultado en el fichero ~interaccionHTML.html~:
    - *Importar* los programas ~/js/gestionPresupuesto~ y ~js/gestionPresupuestoWeb~. Puedes utilizar [[https://es.javascript.info/import-export#import][import * as]] para utilizar un nombre de módulo que agrupe las funciones exportadas por cada fichero.
    - Actualizar el presupuesto a 1500€ (función ~actualizarPresupuesto~)
    - Mostrar el presupuesto en el ~div#presupuesto~ (funciones ~mostrarPresupuesto~ y ~mostrarDatoEnId~)
    - *Crear* los siguientes *gastos* (función ~crearGasto~):
      - ~("Compra carne", 23.44, "2021-10-06", "casa", "comida")~
      - ~("Compra fruta y verdura", 14.25, "2021-09-06", "supermercado", "comida")~
      - ~("Bonobús", 18.60, "2020-05-26", "transporte")~
      - ~("Gasolina", 60.42, "2021-10-08", "transporte", "gasolina")~
      - ~("Seguro hogar", 206.45, "2021-09-26", "casa", "seguros")~
      - ~("Seguro coche", 195.78, "2021-10-06", "transporte", "seguros")~
    - Añadir los gastos creados (función ~anyadirGasto~)
    - Mostrar los gastos totales en ~div#gastos-totales~ (funciones ~calcularTotalGastos~ y ~mostrarDatoEnId~)
    - Mostrar el balance total en ~div#balance-total~ (funciones ~calcularBalance~ y ~mostrarDatoEnId~)
    - Mostrar el listado completo de gastos en ~div#listado-gastos-completo~ (funciones ~listarGastos~ y ~mostrarGastoWeb~)
    - Mostrar el listado de gastos realizados en *septiembre de 2021* en ~div#listado-gastos-filtrado-1~ (funciones ~filtrarGastos~ y ~mostrarGastoWeb~)
    - Mostrar el listado de gastos de *más de 50€* en ~div#listado-gastos-filtrado-2~ (funciones ~filtrarGastos~ y ~mostrarGastoWeb~)
    - Mostrar el listado de gastos de *más de 200€* con etiqueta ~seguros~ en ~div#listado-gastos-filtrado-3~ (funciones ~filtrarGastos~ y ~mostrarGastoWeb~)
    - Mostrar el listado de gastos que tengan las etiquetas ~comida~ o ~transporte~ de *menos de 50€* en ~div#listado-gastos-filtrado-4~ (funciones ~filtrarGastos~ y ~mostrarGastoWeb~)
    - Mostrar el total de gastos *agrupados por día* en ~div#agrupacion-dia~ (funciones ~agruparGastos~ y ~mostrarGastosAgrupadosWeb~)
    - Mostrar el total de gastos *agrupados por mes* en ~div#agrupacion-mes~ (funciones ~agruparGastos~ y ~mostrarGastosAgrupadosWeb~)
    - Mostrar el total de gastos *agrupados por año* en ~div#agrupacion-anyo~ (funciones ~agruparGastos~ y ~mostrarGastosAgrupadosWeb~)
    
*** Fichero ~interaccionHTML.html~ 
    Se proporciona el esqueleto del fichero ~interaccionHTML.html~ que se deberá crear. Se debe prestar atención a los comentarios marcados con ~TODO~.
    
** Formato de la entrega
- Cada persona trabajará en su *repositorio personal* que habrá creado tras realizar el /fork/ del repositorio base.
- Todos los archivos de la práctica se guardarán en el repositorio y se subirán a GitHub periódicamente. Es conveniente ir subiendo los cambios aunque no sean definitivos. *No se admitirán entregas de tareas que tengan un solo commit*.
- *Como mínimo* se debe realizar *un commit* por *cada elemento de la lista de tareas* a realizar (si es que estas exigen crear código, claro está).
- Para cualquier tipo de *duda o consulta* se pueden abrir ~Issues~ haciendo referencia al profesor mediante el texto ~@pedroprieto~ dentro del texto del ~Issue~. Los ~issues~ deben crearse en *tu repositorio*: si no se muestra la pestaña de ~Issues~ puedes activarla en los ~Settings~ de tu repositorio.
- Una vez *finalizada* la tarea se debe realizar una ~Pull Request~ al repositorio base indicando tu *nombre y apellidos* en el mensaje.
