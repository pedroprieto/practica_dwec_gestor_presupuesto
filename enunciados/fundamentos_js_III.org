* Fundamentos de JavaScript III
  El objetivo de esta práctica es seguir profundizando en los conceptos fundamentales de JavaScript. En concreto, trataremos sobre la programación funcional.

** Repositorio de la práctica
   El *repositorio base* de la práctica está disponible en: https://github.com/pedroprieto/practica_dwec_gestor_presupuesto

   Se supone que ya está configurado el *repositorio personal* y el *remoto secundario* (~profesor~). Si no es así, revisa las instrucciones de las prácticas anteriores. En el apartado de *Preparación* se indica cómo proceder.
   
** Requisitos de software
Para poder realizar esta práctica y que funcione adecuadamente el entorno de test será necesario *instalar el siguiente software* en el equipo:
- Navegador [[https://www.google.com/intl/es/chrome/][Chrome]].
- Entorno de ejecución [[https://nodejs.org/es/][NodeJS]].

** Desarrollo guiado por test
Para realizar la práctica se seguirán los principios del [[https://es.wikipedia.org/wiki/Desarrollo_guiado_por_pruebas][Desarrollo Guiado por Test]]. Para ello se proporciona en el repositorio una serie de ficheros que permiten *ejecutar tests*. Dichos tests comprobarán que el programa cumple con algunos de los requisitos de la práctica.

El repositorio se ha configurado para que se *ejecuten los tests automáticamente en la nube de GitHub cuando se realice un push o una pull request*. Para ello se hará uso del servicio [[https://github.com/features/actions][GitHub Actions]].

** Preparación
1. Instalar los requisitos de software indicados
2. Abrir un terminal
3. Situarse en la carpeta del repositorio personal de la práctica
4. *Incorporar a tu repositorio personal los cambios* realizados por el profesor correspondientes a los archivos de esta práctica. Para ello hay que ejecutar:
   #+begin_src shell
     git pull profesor master
   #+end_src
5. Este comando *descarga* los cambios que ha realizado el *profesor* en el *repositorio base* y los *integra* en tu repositorio personal. Tras realizar este paso, seguramente git *abra el editor configurado por defecto* para que introduzcas un *mensaje para crear un nuevo commit* que integre tus cambios y los cambios del profesor. Debes introducir el texto y guardar los cambios.
6. En principio no deben producirse *conflictos*. En caso de que se produzcan (por ejemplo, porque has editado el fichero ~.gitignore~ y yo también porque lo exigía la práctica), *resuélvelos y notifícamelo a través de un Issue*.
7. Ejecuta el comando ~git push~ para subir los cambios a tu repositorio personal (el remoto principal) en GitHub y que queden guardados ahí también.
8. Ejecutar el comando ~npm install~. Este comando instalará todas las librerías de Node necesarias para ejecutar los tests. Dichas librerías se guardarán en una carpeta con nombre ~node_modules~ dentro del repositorio. Nótese que dicha carpeta está excluida del repositorio en el archivo ~.gitignore~.
9. Ejecutar el comando ~npm run test3~ para lanzar los *tests de esta práctica*. Este comando podrá ejecutarse tantas veces como sea necesario. Por pantalla se mostrarán los tests que se pasan y los que no, de manera que se tendrá información sobre las acciones que hay que realizar. Los tests también se ejecutarán automáticamente en GitHub Actions al subir los cambios al repositorio y al realizar la pull request.
10. Si se está utilizando VS Code se puede [[https://code.visualstudio.com/Docs/editor/debugging][lanzar la ejecución de los tests desde el propio editor]] y utilizar *breakpoints* para interrumpir la ejecución y *depurar* el programa. Las configuraciones de lanzamiento creadas para ello están en el archivo ~.vscode/launch.json~.
  [[./imagenes/depurar.png]] 
11. Opcionalmente (recomendable), ejecutar el comando ~npm test~ para lanzar *todos los tests presentes en el repositorio*. Se deberá comprobar que se pasan los tests de las prácticas anteriores a la que se esté realizando. Lógicamente, si el repositorio incluye los tests de prácticas *posteriores* a la que se esté realizando, dichos tests no se pasarán (ya que el trabajo está todavía por hacer). Este último caso puede darse si la persona no está realizando la práctica propuesta en la semana actual (va con "retraso", por así decirlo). En *GitHub Actions* se ejecutarán todos los tests en tareas independientes: así se podrá comprobar si el test de la práctica que se está realizando se ha pasado.

** Tareas a realizar
*** Lectura
    Lee atentamente los siguientes artículos y sus correspondientes subsecciones en caso de que las tengan:
    - [[https://es.javascript.info/prototypes]] (leer solamente: no importa si no se entienden todos los conceptos)
    - https://es.javascript.info/classes (algo denso, pero interesante para comprender gran parte del código JS que se está generando en la actualidad; de nuevo, no hay que comprenderlo todo al 100%, basta "saber que existe")
    - https://es.javascript.info/error-handling
    - https://es.javascript.info/modules

    Los artículos propuestos son de teoría general. La parte práctica tratará en su mayoría sobre *programación funcional*, concretamente:
    - [[https://es.javascript.info/array-methods#filter][Filter]]
    - [[https://es.javascript.info/array-methods#reduce-reduceright][Reduce]]
      
*** Fichero de la aplicación
    Utilizaremos el fichero llamado ~gestionPresupuesto.js~ en la carpeta ~js~ del repositorio. A no ser que se indique lo contrario, todo el código que se cree deberá guardarse en este fichero.

*** Modificación de ~export~
    Añade las funciones ~filtrarGastos~ y ~agruparGastos~ al objeto ~export~ del final del fichero.

    Define las funciones vacías (sin parámetros y sin cuerpo) en el fichero ~gestionPresupuesto.js~ para que los tests no den error de sintaxis y se puedan ir comprobando conforme se vaya avanzando en la práctica.

*** Objeto ~gasto~
**** Métodos
     Añade el siguiente método al objeto ~gasto~ (en su función constructora ~crearGasto~):
     - ~obtenerPeriodoAgrupacion~ - Función de *un parámetro* que *devolverá* el *período de agrupación* correspondiente al parámetro ~periodo~ de la función y a la fecha del gasto. Si el período a agrupar es ~dia~, el período de agrupación tendrá el formato ~aaaa-mm-dd~; si es ~mes~, tendrá el formato ~aaaa-mm~; y si es ~anyo~, tendrá el formato ~aaaa~. Ejemplos:
       #+begin_src javascript
         let gasto1 = new CrearGasto("Gasto 1", 23.55, "2021-09-06", "casa", "supermercado" );
         let gasto2 = new CrearGasto("Gasto 2", 27.55, "2021-11-24", "casa", "supermercado", "comida" );
         
         gasto1.obtenerPeriodoAgrupacion("mes");
         // Resultado: "2021-09"
         gasto1.obtenerPeriodoAgrupacion("anyo");
         // Resultado: "2021"
         gasto1.obtenerPeriodoAgrupacion("dia");
         // Resultado: "2021-09-06"
         
         gasto2.obtenerPeriodoAgrupacion("mes");
         // Resultado: "2021-11"
         gasto2.obtenerPeriodoAgrupacion("anyo");
         // Resultado: "2021"
         gasto2.obtenerPeriodoAgrupacion("dia");
         // Resultado: "2021-11-24"
       #+end_src

*** Funciones
**** Función ~filtrarGastos~
     Función de *un parámetro* que devolverá un subconjunto de los gastos existentes (variable global ~gastos~). Se deberá utilizar la función [[https://es.javascript.info/array-methods#filter][filter]]. El parámetro será un *objeto* que podrá tener las siguientes propiedades:
     - ~fechaDesde~ - Fecha mínima de creación del gasto. Su valor deberá ser un ~string~ con formato válido que pueda entender la función ~Date.parse~.
     - ~fechaHasta~ - Fecha máxima de creación del gasto. Su valor deberá ser un ~string~ con formato válido que pueda entender la función ~Date.parse~.
     - ~valorMinimo~ - Valor mínimo del gasto.
     - ~valorMaximo~ - Valor máximo del gasto.
     - ~descripcionContiene~ - *Trozo de texto* que deberá aparecer en la descripción. Deberá hacerse la comparación de manera que [[https://es.javascript.info/string#cambiando-mayusculas-y-minusculas][no se distingan mayúsculas de minúsculas]].
     - ~etiquetasTiene~ - *Array de etiquetas*: si un gasto contiene *alguna de las etiquetas* indicadas en este parámetro, se deberá devolver en el resultado.  Deberá hacerse la comparación de manera que [[https://es.javascript.info/string#cambiando-mayusculas-y-minusculas][no se distingan mayúsculas de minúsculas]].
     
    Algunos ejemplos de llamadas de función ~filtrarGastos~ podrían ser:
    #+begin_src javascript
      filtrarGastos({});
      filtrarGastos({fechaDesde: "2021-10-10"});
      filtrarGastos({fechaDesde: "2021-10-10", fechaHasta: "2021-10-15"});
      filtrarGastos({valorMinimo: 10});
      filtrarGastos({valorMinimo: 10, valorMaximo: 50});
      filtrarGastos({fechaDesde: "2021-10-10", fechaHasta: "2021-10-15", valorMaximo: 100});
      filtrarGastos({descripcionContiene: "carne", valorMinimo: 10, valorMaximo: 50});
      filtrarGastos({valorMaximo: 50, etiquetasTiene: ["alimentacion"]});
      filtrarGastos({etiquetasTiene: ["alimentacion", "gasolina"]});
      filtrarGastos({etiquetasTiene: ["alimentacion", "gasolina"], fechaDesde: "2021-10-10"});
      filtrarGastos({etiquetasTiene: ["alimentacion", "gasolina"], fechaHasta: "2020-12-31", valorMaximo: 200});
    #+end_src
    
**** Función ~agruparGastos~ 
     Función de *cuatro parámetros* que devolverá *un objeto* con los resultados de realizar una agrupación por período temporal. Los parámetros son:
     - ~periodo~ - Período utilizado para hacer la agrupación. Podrá ser uno de estos tres valores: ~dia~, ~mes~ y ~anyo~. El valor por defecto será ~mes~.
     - ~etiquetas~ - *Array* de etiquetas. Solo se seleccionarán los gastos que contengan alguna de esas etiquetas. Si no se indica o es un array vacío, se considerarán todos los gastos.
     - ~fechaDesde~ - Fecha mínima de creación del gasto. Su valor deberá ser un ~string~ con formato válido que pueda entender la función ~Date.parse~. Si no se indica se considerarán todos los gastos independientemente de su fecha.
     - ~fechaHasta~ - Fecha máxima de creación del gasto. Su valor deberá ser un ~string~ con formato válido que pueda entender la función ~Date.parse~. Si no se indica se considerará la *fecha actual*.

     La función realizará los siguientes *pasos*:
     1. En primer lugar se llamará a ~filtrarGastos~ para obtener el subconjunto de gastos creados entre las fechas indicadas y que tengan alguna de las etiquetas proporcionadas en el parámetro correspondiente.
     2. Ejecutar [[https://es.javascript.info/array-methods#reduce-reduceright][reduce]] sobre el conjunto de gastos filtrados. El *valor inicial del acumulador* de ~reduce~ será un *objeto vacío*. Dentro del cuerpo de la función de ~reduce~, *para cada gasto* se obtendrá su *período de agrupación* (a través del método ~obtenerPeriodoAgrupacion~ del gasto y el parámetro ~periodo~), que se utilizará para *identificar la propiedad del acumulador sobre la que se sumará su valor*. Así, si ~periodo = mes~, un gasto con fecha ~2021-11-01~ tendrá un período de agrupación ~2021-11~, por lo que su valor se sumará a ~acc["2021-11"]~ (siempre que la variable del acumulador haya recibido el nombre ~acc~ en la llamada a ~reduce~). Tienes una pista sobre cómo proceder en la siguiente [[https://stackoverflow.com/questions/14446511/most-efficient-method-to-groupby-on-an-array-of-objects][pregunta de Stack Overflow]].
     3. El resultado de ~reduce~ será el valor de vuelta de la función ~agruparGastos~.
     
     Algunos ejemplos de resultados de ejecución de ~agruparGastos~:   
     #+begin_src javascript
       gastos = [
           {id: 0, descripcion: "Gasto 1", valor: 5, fecha: "2021-09-30", etiquetas: ["alimentacion"]},
           {id: 1, descripcion: "Gasto 1", valor: 10, fecha: "2021-10-01", etiquetas: ["alimentacion"]},
           {id: 2, descripcion: "Gasto 1", valor: 12, fecha: "2021-10-02", etiquetas: ["transporte"]},
           {id: 3, descripcion: "Gasto 1", valor: 17, fecha: "2021-10-02", etiquetas: ["alimentacion"]}
       ];
       
       // Suponemos fecha actual 2021-10-15
       
       let agrup1 = agruparGastos("mes");
       /*agrup1 = {
           "2021-09": 5,
           "2021-10": 39
       }*/
       
       let agrup2 = agruparGastos("dia");
       /*agrup2 = {
           "2021-09-30": 5,
           "2021-10-01": 10,
           "2021-10-02": 29
       }*/
       
       let agrup3 = agruparGastos("mes", ["alimentacion"]);
       /*agrup3 = {
           "2021-09": 5,
           "2021-10": 27
       }*/
     #+end_src

** Formato de la entrega
- Cada persona trabajará en su *repositorio personal* que habrá creado tras realizar el /fork/ del repositorio base.
- Todos los archivos de la práctica se guardarán en el repositorio y se subirán a GitHub periódicamente. Es conveniente ir subiendo los cambios aunque no sean definitivos. *No se admitirán entregas de tareas que tengan un solo commit*.
- *Como mínimo* se debe realizar *un commit* por *cada elemento de la lista de tareas* a realizar (si es que estas exigen crear código, claro está).
- Para cualquier tipo de *duda o consulta* se pueden abrir ~Issues~ haciendo referencia al profesor mediante el texto ~@pedroprieto~ dentro del texto del ~Issue~. Los ~issues~ deben crearse en *tu repositorio*: si no se muestra la pestaña de ~Issues~ puedes activarla en los ~Settings~ de tu repositorio.
- Una vez *finalizada* la tarea se debe realizar una ~Pull Request~ al repositorio base indicando tu *nombre y apellidos* en el mensaje.
