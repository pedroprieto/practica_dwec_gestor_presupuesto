* Formularios y JavaScript
  En esta práctica aprenderemos a interactuar con formularios HTML desde JavaScript. El usuario podrá utilizar la aplicación y realizar cambios en la misma a través de controles de formulario en lugar de utilizar ~prompt~.

** Repositorio de la práctica
   El *repositorio base* de la práctica está disponible en: https://github.com/pedroprieto/practica_dwec_gestor_presupuesto

   Se supone que ya está configurado el *repositorio personal* y el *remoto secundario* (~profesor~). Si no es así, revisa las instrucciones de las prácticas anteriores. En el apartado de *Preparación* se indica cómo proceder.
   
** Requisitos de software
Para poder realizar esta práctica y que funcione adecuadamente el entorno de test será necesario *instalar el siguiente software* en el equipo:
- Navegador [[https://www.google.com/intl/es/chrome/][Chrome]].
- Entorno de ejecución [[https://nodejs.org/es/][NodeJS]].

** Desarrollo guiado por test
Para realizar la práctica se seguirán los principios del [[https://es.wikipedia.org/wiki/Desarrollo_guiado_por_pruebas][Desarrollo Guiado por Test]]. Para ello se proporciona en el repositorio una serie de ficheros que permiten *ejecutar tests*. Dichos tests comprobarán que el programa cumple con algunos de los requisitos de la práctica.

El repositorio se ha configurado para que se *ejecuten los tests automáticamente en la nube de GitHub cuando se realice un push o una pull request*. Para ello se hará uso del servicio [[https://github.com/features/actions][GitHub Actions]].

** Preparación
1. Instalar los requisitos de software indicados
2. Abrir un terminal
3. Situarse en la carpeta del repositorio personal de la práctica
4. *Incorporar a tu repositorio personal los cambios* realizados por el profesor correspondientes a los archivos de esta práctica. Para ello hay que ejecutar:
   #+begin_src shell
     git pull profesor master
   #+end_src
5. Este comando *descarga* los cambios que ha realizado el *profesor* en el *repositorio base* y los *integra* en tu repositorio personal. Tras realizar este paso, seguramente git *abra el editor configurado por defecto* para que introduzcas un *mensaje para crear un nuevo commit* que integre tus cambios y los cambios del profesor. Debes introducir el texto y guardar los cambios.
6. En principio no deben producirse *conflictos*. En caso de que se produzcan (por ejemplo, porque has editado el fichero ~.gitignore~ y yo también porque lo exigía la práctica), *resuélvelos y notifícamelo a través de un Issue*.
7. Ejecuta el comando ~git push~ para subir los cambios a tu repositorio personal (el remoto principal) en GitHub y que queden guardados ahí también.
8. Ejecutar el comando ~npm install~. Este comando instalará todas las librerías de Node necesarias para ejecutar los tests. Dichas librerías se guardarán en una carpeta con nombre ~node_modules~ dentro del repositorio. Nótese que dicha carpeta está excluida del repositorio en el archivo ~.gitignore~.
9. Ejecutar el comando ~npm run test6~ para lanzar los *tests de esta práctica*. Este comando podrá ejecutarse tantas veces como sea necesario. Por pantalla se mostrarán los tests que se pasan y los que no, de manera que se tendrá información sobre las acciones que hay que realizar. Los tests también se ejecutarán automáticamente en GitHub Actions al subir los cambios al repositorio y al realizar la pull request.
10. Opcionalmente (recomendable), ejecutar el comando ~npm test~ para lanzar *todos los tests presentes en el repositorio*. Se deberá comprobar que se pasan los tests de las prácticas anteriores a la que se esté realizando. Lógicamente, si el repositorio incluye los tests de prácticas *posteriores* a la que se esté realizando, dichos tests no se pasarán (ya que el trabajo está todavía por hacer). Este último caso puede darse si la persona no está realizando la práctica propuesta en la semana actual (va con "retraso", por así decirlo). En *GitHub Actions* se ejecutarán todos los tests en tareas independientes: así se podrá comprobar si el test de la práctica que se está realizando se ha pasado.

    #+begin_quote
    ¡IMPORTANTE! Esta práctica utiliza la suite de test [[https://www.cypress.io/][Cypress]]. Puedes ejecutar el test en consola de la manera habitual (~npm run test6~) o bien ejecutar el modo *gráfico* mediante el comando ~npx cypress open~. Recuerda ejecutar ~npm install~ antes para instalar el paquete ~cypress~.

   Recuerda que puedes utilizar el navegador para *visualizar el trabajo* que vas haciendo. Como la carga de scripts la realizamos a través de *módulos*, no basta con hacer doble clic en el archivo ~HTML~, sino que es necesario visualizar la página *desde un servidor*. Para ello puedes utilizar la extensión [[https://ritwickdey.github.io/vscode-live-server/][Live Server]] de Vísual Studio Code.
    #+end_quote

** Tareas a realizar
*** Lectura
    Lee atentamente los siguientes artículos y sus correspondientes subsecciones en caso de que las tengan:
    - https://es.javascript.info/forms-controls
    - https://es.javascript.info/template-element (puedes ignorar a partir de donde hace referencia al /Shadow DOM/).
      
*** Ficheros de la aplicación
    Vamos a utilizar los ficheros de la práctica anterior realizando modificaciones sobre el archivo ~js/gestionPresupuestoWeb.js~.

    Utilizaremos de nuevo el fichero ~interaccionHTML.html~ para mostrar los datos e interactuar con la aplicación a través del navegador.
    
    La aplicación funcionará de la siguiente manera:
    - El usuario abrirá el archivo ~interaccionHTML.html~ en el navegador (a través de un servidor web, tal como se ha comentado en la sección de *Preparación*).
    - El archivo ~interaccionHTML.html~ cargará el programa ~js/generarDatosEstaticos.js~. Dicho programa *hará uso de dos programas* (que se utilizarán como librerías):
      - Librería ~js/gestionPresupuestoWeb.js~, que definirá una serie de *funciones* para interactuar con el [[https://es.javascript.info/dom-nodes][DOM]] de la página y mostrar los datos en HTML. En esta práctica *realizaremos modificaciones* en este fichero para añadir soporte de *eventos*.
      - Librería ~js/gestionPresupuesto.js~, que contiene la lógica de negocio de la aplicación (funciones para crear, editar, borrar y mostrar gastos).

    El archivo ~js/generarDatosEstaticos.js~ se utilizará para crear unos gastos iniciales para poder hacer *pruebas durante el desarrollo* (para que no aparezca la aplicación vacía). Por tanto, en una aplicación en producción *no sería necesario*: el archivo HTML funcionaría cargando el archivo ~/js/gestionPresupuestoWeb.js~ directamente.
    
*** Fichero ~interaccionHTML.html~
**** Añadir un botón para crear gastos mediante formulario
     En primer lugar vamos a *modificar* el código de la capa ~<div id="controlesprincipales">~ para que quede de la siguiente manera:

     #+begin_src html
       <div id="controlesprincipales">
         <button type="button" id="actualizarpresupuesto">
           Actualizar presupuesto
         </button>
         <button type="button" id="anyadirgasto">
           Añadir gasto
         </button>
         <button type="button" id="anyadirgasto-formulario">
           Añadir gasto (formulario)
         </button>
       </div>
     #+end_src

     Como puede verse, añadiremos un *segundo botón* para añadir un gasto. Este segundo botón activará la lógica para *crear un gasto a través de un formulario* en lugar de hacerlo a través de varios ~prompt~ como hacía el botón original. 

     Así, nuestra aplicación tendrá *dos botones para añadir gastos*: uno a través de ~prompt~ y otro más avanzado a través de un *formulario web*. Como puede imaginarse, en una aplicación real tendríamos únicamente este segundo botón. Mantenemos el primero (y su lógica asociada) *para que los tests de la práctica anterior sigan funcionando*.

**** Plantilla para crear un formulario para añadir o modificar gastos
      En segundo lugar vamos a añadir el siguiente código HTML *al final* del ~<body>~ (justo antes del cierre de la etiqueta):

      #+begin_src html
        <template id="formulario-template">
            <form>
                <div class="form-control">
                    <label for="descripcion">Descripción</label>
                    <input type="text" name="descripcion" id="descripcion">
                </div>
                <div class="form-control">
                    <label for="valor">Valor</label>
                    <input type="number" step="0.01" name="valor" id="valor">
                </div>
                <div class="form-control">
                    <label for="fecha">Fecha</label>
                    <input type="date" name="fecha" id="fecha">
                </div>
                <div class="form-control">
                    <label for="etiquetas">Etiquetas</label>
                    <input type="text" name="etiquetas" id="etiquetas">
                </div>
                <button type="submit">Enviar</button>
                <button class="cancelar" type="button">Cancelar</button>
            </form>
        </template>
      #+end_src

      Este código es el código de una [[https://es.javascript.info/template-element][template HTML]]. El elemento ~<template>~ *no se muestra* en el navegador, sino que se queda como *referencia para crear elementos nuevos basados en él desde JavaScript*.

      En lugar de crear el código HTML como hicimos en la práctica anterior (mediante ~document.createElement~ y ~element.append~, principalmente), utilizaremos una técnica distinta basada en el elemento ~<template>~.

      En el archivo ~gestionPresupuestoWeb.js~ veremos cómo utilizar esta plantilla para crear esa estructura HTML directamente sin necesidad de crear cada nodo de manera individual.
    
*** Fichero ~js/gestionPresupuestoWeb.js~ 
    Vamos a hacer una serie de modificaciones sobre este fichero con respecto a la práctica anterior. Básicamente *duplicaremos* la funcionalidad que teníamos antes para implementar la *edición y creación de gastos* mediante *formularios* en lugar de utilizar ~prompt~.

    La estrategia a seguir será la siguiente:
    - Crearemos *botones nuevos* para *añadir y editar* gastos. Mantenemos los anteriores junto con su lógica asociada para que los tests de la práctica anterior sigan funcionando. Como hemos comentado antes, en una aplicación real solo utilizaríamos un método (posiblemente el que vamos a utilizar en esta práctica).
    - Al pulsar en el botón de añadir o editar *crearemos un formulario basado en la plantilla* definida en el archivo HTML.
    - En el caso de editar, rellenaremos los valores de los campos del formulario con los datos del gasto que estemos editando.
    - El formulario tendrá dos botones: un botón *enviar* que se encargará de actualizar o crear el gasto, y un botón *cancelar* que cerrará el formulario sin guardar los cambios.
    - Los dos botones del formulario tendrán cada uno un *manejador de eventos* asociado que les permita realizar sus tareas.

**** Función ~nuevoGastoWebFormulario~ y botón ~anyadirgasto-formulario~
     Esta función se utilizará como [[https://es.javascript.info/introduction-browser-events#addeventlistener][manejadora de eventos]] del botón ~anyadirgasto-formulario~ del código HTML. Realizará las siguientes tareas:
     - Crear una copia del formulario web definido en la plantilla HTML. El [[https://es.javascript.info/template-element#insertando-template][código a utilizar]] es el siguiente:
       #+begin_src javascript
         let plantillaFormulario = document.getElementById("formulario-template").content.cloneNode(true);;
       #+end_src
       Desde este momento, la variable ~plantillaFormulario~ almacena un nuevo [[https://es.javascript.info/modifying-document#document-fragment][fragmento de documento]] correspondiente al elemento ~<template>~. Posteriormente lo añadiremos a la página y se insertará su contenido (el elemento ~<form>~ que hay en su interior).
     - Acceder al elemento ~<form>~ dentro de ese fragmento de documento. Para ello podemos utilizar por ejemplo:
       #+begin_src javascript
         var formulario = plantillaFormulario.querySelector("form");
       #+end_src
       Desde este momento, la variable ~formulario~ almacena el nodo formulario que vamos a crear.
     - Crear un *manejador de evento* para el evento ~submit~ del formulario. Utilizaremos ~addEventListener~. Deberás crear una *función manejadora de este evento* (con un único parámetro, el evento a procesar) que realice las siguientes tareas:
       - Prevenir el envío del formulario (comportamiento [[https://es.javascript.info/default-browser-action#evitar-las-acciones-del-navegador][por defecto]]) mediante ~event.preventDefault()~. Ten en cuenta que el evento ~submit~ de un formulario provoca su envío a una URL y por tanto el abandono (o la recarga) de la página: en este caso no queremos enviar nada, sino que queremos ejecutar un código JavaScript sin abandonar la página.
       - Crear un nuevo gasto con la información de los campos del formulario. Recuerda que la función manejadora tiene [[https://es.javascript.info/introduction-browser-events#objeto-del-evento][acceso al evento]], que a su vez tiene acceso al elemento que lo ha provocado (el formulario) desde ~event.currentTarget~. Una vez tenemos acceso al formulario, podemos [[https://es.javascript.info/form-elements#navegacion-formularios-y-elementos][acceder a sus campos y sus valores]].
       - Añadir el gasto a la lista de gastos.
       - Llamar a la función ~repintar~.
       - Activar (eliminar atributo ~disabled~) el botón ~anyadirgasto-formulario~ (lo habremos desactivado al activar el formulario). Como estamos utilizando una función manejadora de eventos que trabaja sobre el evento ~submit~ del formulario, no tenemos manera de localizar el botón ~anyadirgasto-formulario~ de manera fácil, así que, aprovechando que solo hay un único botón ~anyadirgasto-formulario~, lo buscaremos por su ~id~ mediante ~document.getElementById~.
     - Crear un *manejador de evento* para el evento ~click~ del botón ~Cancelar~ del formulario. Para ello deberemos localizar dicho botón (por ejemplo, mediante ~formulario.querySelector("button.cancelar")~). Utilizaremos ~addEventListener~ junto con un *objeto manejador de eventos* siguiendo la *técnica de la práctica anterior*, que consiste en definir una función constructora que implemente ~handleEvent~, crear un objeto basado en ese constructor y añadir como *propiedades adicionales* de dicho objeto:
       - La variable ~formulario~, para que al pulsar en ~cancelar~ se [[https://es.javascript.info/modifying-document#eliminacion-de-nodos][elimine]] el formulario.
       - La referencia al botón ~anyadirgasto-formulario~, para que al pulsar en ~cancelar~ *se vuelva a activar dicho botón* (eliminar atributo ~disabled~). Recuerda que estamos en su función manejadora de eventos, por lo que dicho botón es el que ha provocado dicho evento y por tanto está disponible en la propiedad ~currentTarget~ del evento.
     - Desactivar (añadir atributo ~disabled~) el botón ~anyadirgasto-formulario~.
     - Por último, añadir el fragmento de documento (variable ~plantillaFormulario~) al final del ~<div id="controlesprincipales">~ para que se muestre en la página.
     
     Recuerda, al final tienes que tener lo siguiente:
     - Función ~nuevoGastoWebFormulario~ (manejadora de eventos del botón ~anyadirgasto-formulario~). Se encarga de pintar el formulario (cargar la plantilla, modificarla y añadirla a la página), desactivar el botón ~anyadirgasto-formulario~ y crear y asociar manejadores de eventos a los botones ~Enviar~ y ~Cancelar~ del formulario.
     - Función manejadora de eventos del evento ~submit~ del formulario. Se encarga de crear el gasto a partir de los datos del formulario, llamar a ~repintar~ y activar de nuevo el botón ~anyadirgasto-formulario~.
     - Función constructora que se utilizará para crear el objeto manejador de eventos del botón ~Cancelar~ del formulario, que se encargará de crear objetos con un único método ~handleEvent~ tal como estudiamos en la práctica anterior. El método ~handleEvent~ de esta función constructora se encargará de eliminar el formulario y volver a activar el botón ~anyadirgasto-formulario~.
     
**** Modificación de la función ~mostrarGastoWeb~
     Añade un *segundo botón de edición* a la estructura HTML de cada gasto. Este botón deberá asociarse a un evento ~click~ asociado a un *objeto manejador de eventos* basado en la función constructora ~EditarHandleformulario~ siguiendo la técnica indicada en la práctica anterior.

     La estructura HTML final que debe quedar para cada gasto es la siguiente:
     #+begin_src html
       <div class="gasto">
         <div class="gasto-descripcion">DESCRIPCIÓN DEL GASTO</div>
         <div class="gasto-fecha">FECHA DEL GASTO</div> 
         <div class="gasto-valor">VALOR DEL GASTO</div> 
         <div class="gasto-etiquetas">
           <!-- Este elemento span tendrá un manejador de eventos -->
           <span class="gasto-etiquetas-etiqueta">
             ETIQUETA 1
           </span>
           <!-- Este elemento span tendrá un manejador de eventos -->
           <span class="gasto-etiquetas-etiqueta">
             ETIQUETA 2
           </span>
           <!-- Etcétera -->
         </div> 
         <!-- Este botón tendrá un manejador de eventos -->
         <button class="gasto-editar" type="button">Editar</button>
         <!-- Este botón tendrá un manejador de eventos -->
         <button class="gasto-borrar" type="button">Borrar</button>
         <!-- Este botón tendrá un manejador de eventos -->
         <button class="gasto-editar-formulario" type="button">Editar (formulario)</button>
       </div>
     #+end_src
     
**** Función ~EditarHandleFormulario~
     Esta función se utilizará para crear el [[https://es.javascript.info/introduction-browser-events#objetos-handlers-handleevent][objeto manejador de eventos]] para editar un gasto *a través de un formulario*. El objeto que se cree a partir de ella irá asociado al evento ~click~ del botón ~button.gasto-editar-formulario~ (creado en el punto anterior).

     La función ~EditarHandleFormulario~ será una [[https://es.javascript.info/constructor-new#funcion-constructora][función constructora]] que definirá exclusivamente un método llamado ~handleEvent~. Cuando creemos un objeto basado en su prototipo, asignaremos a dicho objeto una propiedad llamada ~gasto~, que será una referencia al gasto que estemos editando. El código de la función ~handleEvent~ definida en esta función constructora podrá hacer referencia a dicho gasto a través de ~this.gasto~, ya que es una propiedad del objeto. Esta técnica es la misma que utilizamos en la práctica anterior con la excepción de las tareas que realizará, que serán distintas (no pedirá al usuario los datos mediante ~prompt~, sino que se encargará de pintar un formulario para que el usuario introduzca los datos).

     Esta función (~handleEvent~) realizará las *mismas tareas* que ~nuevoGastoWebFormulario~, con las siguientes *diferencias*:
     - A la hora de crear el formulario, deberá *actualizar los campos del formulario con la información del gasto que se está editando*. El formulario debe quedar con los campos *rellenos* al abrirse. Recuerda que esta función tendrá acceso a los datos del gasto que se esté editando en ~this.gasto~.
     - El manejador de eventos del evento ~submit~ del formulario no será una función, sino un *objeto manejador de eventos*, ya que necesita *acceder al gasto* para actualizarlo. Por tanto, debe utilizarse la misma técnica utilizada en la práctica anterior: definir una función constructora que implemente ~handleEvent~, crear un objeto basado en ese constructor y añadir el gasto como propiedad adicional de dicho objeto.
     - El manejador de eventos del evento ~submit~ no tendrá que volver a habilitar el botón de ~Editar~, ya que la función ~repintar~ se encarga de volver a mostrar el listado de gastos creando la estructura nueva (botones de ~Editar~ y ~Borrar~ incluidos, sin ningún atributo ~disabled~).
     - Puedes utilizar la misma función constructora que has creado para el botón ~Cancelar~ de ~nuevoGastoWebFormulario~: la funcionalidad es la misma, así que solo tendrás que crear un objeto basado en ese constructor y pasar las referencias correspondientes al formulario y al botón del gasto que estés editando.

     A continuación se muestra un ejemplo de funcionamiento:
     
     [[./imagenes/editar_formulario.gif]]
     
** Formato de la entrega
- Cada persona trabajará en su *repositorio personal* que habrá creado tras realizar el /fork/ del repositorio base.
- Todos los archivos de la práctica se guardarán en el repositorio y se subirán a GitHub periódicamente. Es conveniente ir subiendo los cambios aunque no sean definitivos. *No se admitirán entregas de tareas que tengan un solo commit*.
- *Como mínimo* se debe realizar *un commit* por *cada elemento de la lista de tareas* a realizar (si es que estas exigen crear código, claro está).
- Para cualquier tipo de *duda o consulta* se pueden abrir ~Issues~ haciendo referencia al profesor mediante el texto ~@pedroprieto~ dentro del texto del ~Issue~. Los ~issues~ deben crearse en *tu repositorio*: si no se muestra la pestaña de ~Issues~ puedes activarla en los ~Settings~ de tu repositorio.
- Una vez *finalizada* la tarea se debe realizar una ~Pull Request~ al repositorio base indicando tu *nombre y apellidos* en el mensaje.
